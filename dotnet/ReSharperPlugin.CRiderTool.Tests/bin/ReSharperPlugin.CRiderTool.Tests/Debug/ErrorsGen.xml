<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ErrorsGen</name>
    </assembly>
    <members>
        <member name="M:JetBrains.ReSharper.Build.Tools.ErrorDescriptionGenerator.ParseCommandLine(System.String[])">
            <summary>
            Entry point for the cmdline-mode.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Build.Tools.ErrorDescriptionGenerator.Generate(JetBrains.ReSharper.Build.Tools.WorkModes,System.String,System.String,System.String,System.String,System.String,System.Action{System.String},System.Action{System.String})">
            <summary>
            Does all the useful sorta things.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Build.Tools.ErrorsGenTaskStub">
             <summary>
             Generates source code definitions from the <c>Errors.xml</c> files.
             This complies with the <c>ProxyToSolutionCompiledTask</c> calling convention.
            
             Expected parameters (task items with metadata <c>ParameterName</c> equal to these):
            
             • <c>Inputs</c>, multiple input files to process. Metadata:
             • • <c>ParameterName</c> — <c>Inputs</c> (that's how we pick these items). Required.
             • • <c>FullPath</c> — full path to the input file. Required.
             • • <c>OutputFile</c> — full path to the output file. Required.
             • • <c>Mode</c> — <see cref="T:JetBrains.ReSharper.Build.Tools.WorkModes"/>. Optional if a <c>JetGenerator</c> parameter item is given, otherwise required.
             • • <c>LangMacro</c> — macro to replace with language name. Optional.
             • • <c>Namespace</c> — NS to put generated files into. Optional if <c>Link</c> metadata is available on this item, otherwise required.
             • • <c>Link</c> — Logical name of the item under its project directory, can be used for inferring the namespace if it's not given. Optional.
             
             • <c>JetGenerator</c> — when running under SDK Mini, the ID of the generator being called, which comes from the task item name it is serving. For errorsgen, this allows to set its operation mode by item name rather than by additional metadata on it. Metadata:
             • • <c>ParameterName</c> — <c>JetGenerator</c> (that's how we pick this item, only one expected).
             • • <c>Identity</c> — the item spec, the Generator ID. See <see cref="T:JetBrains.ReSharper.Build.Tools.ErrorsGenTaskStub.WorkModeAsGeneratorId"/> for values expected here.
             
             • <c>RootNamespace</c> — if an explicit namespace is omitted on Inputs items, allows to infer it from the relative path. Metadata:
             • • <c>ParameterName</c> — <c>RootNamespace</c> (that's how we pick this item, only one expected).
             • • <c>Identity</c> — the root namespace of the project.
             </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Build.Tools.ErrorsGenTaskStub.#ctor(System.Collections.Generic.Dictionary{System.String,System.String}[],System.Collections.Generic.List{System.Collections.Generic.Dictionary{System.String,System.String}},System.Collections.Generic.IDictionary{System.String,System.Action{System.String}})">
            <summary>
            This complies with the <c>ProxyToSolutionCompiledTask</c> calling convention.
            </summary>
        </member>
        <member name="T:JetBrains.ReSharper.Build.Tools.ErrorsGenTaskStub.WorkModeAsGeneratorId">
            <summary>
            Declares expected values for <c>JetGenerator</c> input parameter.
            </summary>
        </member>
        <member name="M:JetBrains.ReSharper.Build.Tools.QuickFixRegistrarComponent.Registration.MakeUpperCamelCaseName(System.String)">
            <summary>
            Changes the name from lowerCamelCase or MixedCAMELCase or
            dashed-words or underscored_words into the UpperCamelCase format.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
    </members>
</doc>
